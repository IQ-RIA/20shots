// Generated by CoffeeScript 1.3.3

define(['j/core/base/View', 'text!j/view/layout/LoginLayout.tpl', 'text!j/view/layout/DefaultLayout.tpl'], function(View, LoginLayout, DefaultLayout) {
  return View.extend({
    el: "body",
    tpl: LoginLayout,
    renderParams: {},
    events: {
      "click #vk-login-btn": "onVkLoginButtonClick",
      "click #play-btn": "onPlayButtonClick",
      "keypress #search-val": "onSongSearchChanged"
    },
    addPage: function(page) {
      if (this.currentPage) {
        this.items = _.reject(this.items, function(item) {
          return this.currentPage === item;
        }, this);
      }
      this.currentPage = page;
      this.add(page);
      if (!this.rendered) {
        return this.render();
      } else {
        return page.render();
      }
    },
    doRender: function() {
      $(this.el).attr("class", this.cls);
      return _.template(this.tpl, this.renderParams);
    },
    toLogin: function() {
      this.clear();
      this.name = 'login';
      this.cls = 'login-layout';
      this.tpl = LoginLayout;
      this.renderParams = {
        vkAppId: J.constants.VK_APP_ID
      };
      return this;
    },
    toDefault: function() {
      this.clear();
      this.name = 'default';
      this.tpl = DefaultLayout;
      this.cls = 'default-layout';
      this.renderParams = {
        logoutLink: J.links.user.logout
      };
      return this;
    },
    onVkLoginButtonClick: function(e) {
      e.preventDefault();
      return VK.Auth.login(this.onVkLogin, 8);
    },
    onVkLogin: function(response) {
      var user;
      if (response.status !== "connected") {
        return;
      }
      user = response.session.user;
      return VK.api("isAppUser", {
        uid: user.id
      }, function(response) {
        if (response.response - 0 !== 1) {
          return;
        }
        user.first_name = user.first_name;
        user.last_name = user.last_name;
        user.vk_id = user.id;
        return $.ajax({
          type: "POST",
          data: user,
          url: J.links.user,
          dataType: "json",
          success: function(response) {
            window.user = response.user;
            window.online = response.online;
            return J.app.renderDefaultLayout();
          }
        });
      }, "json");
    },
    onPlayButtonClick: function(e) {
      var target;
      target = $(e.target);
      if (target.hasClass("isActive")) {
        target.val("Play");
        return target.removeClass("isActive");
      } else {
        target.val("Stop Playing");
        target.addClass("isActive");
        return this.playSong();
      }
    },
    playSong: function() {
      var el;
      el = $("#player").get(0);
      el.src = "http://" + window.location.hostname + "/music/" + J.currentDj + ".mp3";
      return el.play();
    },
    onSongSearchChanged: function(e) {
      var field,
        _this = this;
      field = $(e.target);
      if (this.searchTimeout) {
        clearTimeout(this.searchTimeout);
      }
      return this.searchTimeout = setTimeout(function() {
        return _this.loadSongs(field.val());
      }, 350);
    },
    loadSongs: function(name) {
      return VK.api("audio.search", {
        q: name,
        auto_complete: true,
        sort: 2,
        count: 200
      }, _.bind(this.renderSongList, this));
    },
    renderSongList: function(config) {
      return this.getSongList().updateWith(config.response);
    }
  });
});
